@page "/passwordless"
@inject IJSRuntime JSRuntime

<PageTitle>Passwordless Registration</PageTitle>

<script src="js/helpers.js"></script>
<script src="js/passwordless.register.js"></script>

<h1>Register with Passkey</h1>

<EditForm Model="@formData" FormName="PasskeyRegister" OnValidSubmit="TriggerRegisterSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="formData.Username" class="form-control" />
    </div>

    <div>
        <label for="superSecret">Super secret</label>
        <InputText id="superSecret" @bind-Value="formData.Supersecret" class="form-control" />
    </div>

    <div>
        <label for="authType">Device Type</label>
        <InputSelect id="authType" @bind-Value="formData.AuthType" class="form-control">
            <option value="platform">This device</option>
            <option value="cross-platform">Security key</option>
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
<div class="alert alert-danger">@errorMessage</div>
}

@code {
    private bool IsRendered = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsRendered = true;
            // Any JavaScript initialization can go here if needed
        }
    }
    
    
    public string errorMessage = "";

    public class FormData
    {
        public string Username { get; set; } = "";
        public string Supersecret { get; set; } = "";
        public string AuthType { get; set; } = "platform";
    }

    public FormData formData = new();
    
    public async Task TriggerRegisterSubmit()
    {
        if (!IsRendered)
        {
            errorMessage = "Page not fully loaded yet.";
            return;
        }
        
        try
        {
            await JSRuntime.InvokeVoidAsync("handleRegisterSubmit", formData.Username, formData.Supersecret, formData.AuthType);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

}
